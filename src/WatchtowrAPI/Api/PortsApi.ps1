#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Get Port

.DESCRIPTION

No description available.

.PARAMETER Id
The asset ID of a Port to get.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ClientPortData
#>
function Get-AssetPortDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Decimal]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-AssetPortDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/client/assets/ip/port/show/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling getAssetPortDetails."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ClientPortData" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

List Ports

.DESCRIPTION

No description available.

.PARAMETER Page
The page number for paginated results. If the page field is not provided in the request, it defaults to 1, which corresponds to the first page of results.

.PARAMETER PageSize
The number of items to be included on each page of paginated results. If the pageSize field is not specified, it defaults to 10. The maximum for pageSize is 30.

.PARAMETER IncludeClosedPort
Include listings with closed ports.

.PARAMETER IncludeNoService
Include listings without a service

.PARAMETER CreatedFrom
Filter ports created after a given date and time.

.PARAMETER CreatedTo
Filter ports created before a given date and time.

.PARAMETER UpdatedFrom
Filter ports updated after a given date and time.

.PARAMETER UpdatedTo
Filter ports updated before a given date and time.

.PARAMETER AssetName
Search ports by port number.

.PARAMETER BusinessUnitIds
Filter assets by a list of comma separated business unit IDs that the asset is related to.

.PARAMETER CustomPropertyKey
Filter assets by custom property key.

.PARAMETER CustomPropertyValue
Filter assets by custom property value. Must be used together with customPropertyKey.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedClientPort
#>
function Get-ListAssetPorts {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${Page},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${PageSize},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeClosedPort},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeNoService},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedFrom},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedTo},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedFrom},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedTo},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AssetName},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BusinessUnitIds},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomPropertyKey},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CustomPropertyValue},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-ListAssetPorts' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/client/assets/ip/port/list'

        if ($Page) {
            $LocalVarQueryParameters['page'] = $Page
        }

        if ($PageSize) {
            $LocalVarQueryParameters['pageSize'] = $PageSize
        }

        if ($IncludeClosedPort) {
            $LocalVarQueryParameters['includeClosedPort'] = $IncludeClosedPort
        }

        if ($IncludeNoService) {
            $LocalVarQueryParameters['includeNoService'] = $IncludeNoService
        }

        if ($CreatedFrom) {
            $LocalVarQueryParameters['created_from'] = $CreatedFrom
        }

        if ($CreatedTo) {
            $LocalVarQueryParameters['created_to'] = $CreatedTo
        }

        if ($UpdatedFrom) {
            $LocalVarQueryParameters['updated_from'] = $UpdatedFrom
        }

        if ($UpdatedTo) {
            $LocalVarQueryParameters['updated_to'] = $UpdatedTo
        }

        if ($AssetName) {
            $LocalVarQueryParameters['assetName'] = $AssetName
        }

        if ($BusinessUnitIds) {
            $LocalVarQueryParameters['businessUnitIds'] = $BusinessUnitIds
        }

        if ($CustomPropertyKey) {
            $LocalVarQueryParameters['customPropertyKey'] = $CustomPropertyKey
        }

        if ($CustomPropertyValue) {
            $LocalVarQueryParameters['customPropertyValue'] = $CustomPropertyValue
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedClientPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

