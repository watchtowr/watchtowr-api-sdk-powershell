#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

List Points of Interest

.DESCRIPTION

No description available.

.PARAMETER Page
The page number for paginated results. If the page field is not provided in the request, it defaults to 1, which corresponds to the first page of results.

.PARAMETER PageSize
The number of items to be included on each page of paginated results. If the pageSize field is not specified, it defaults to 10. The maximum for pageSize is 30.

.PARAMETER CreatedFrom
Filter points of interest created after a given date and time.

.PARAMETER CreatedTo
Filter points of interest created before a given date and time.

.PARAMETER UpdatedFrom
Filter points of interest updated after a given date and time.

.PARAMETER UpdatedTo
Filter points of interest updated before a given date and time.

.PARAMETER DiscoveredDateOrder
Order points of interest by their discovery date.

.PARAMETER Search
Search Points of Interest by name or URL.

.PARAMETER Types
Filter by a comma separated list of types.

.PARAMETER HasFinding
Filter points of interest that have findings.

.PARAMETER StartDate
Filter points of interest by start date.

.PARAMETER EndDate
Filter points of interest by end date.

.PARAMETER AssetStatuses
Filter points of interest by a comma separated list of asset statuses.

.PARAMETER BusinessUnitIds
Filter points of interest by a comma separated list of business unit IDs.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedPointOfInterest
#>
function Get-ListPointsOfInterest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${Page},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${PageSize},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedFrom},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedTo},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedFrom},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedTo},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("ASC", "DESC")]
        [String]
        ${DiscoveredDateOrder},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Search},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Types},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${HasFinding},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${StartDate},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${EndDate},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AssetStatuses},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BusinessUnitIds},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-ListPointsOfInterest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/client/points-of-interest/list'

        if ($Page) {
            $LocalVarQueryParameters['page'] = $Page
        }

        if ($PageSize) {
            $LocalVarQueryParameters['pageSize'] = $PageSize
        }

        if ($CreatedFrom) {
            $LocalVarQueryParameters['created_from'] = $CreatedFrom
        }

        if ($CreatedTo) {
            $LocalVarQueryParameters['created_to'] = $CreatedTo
        }

        if ($UpdatedFrom) {
            $LocalVarQueryParameters['updated_from'] = $UpdatedFrom
        }

        if ($UpdatedTo) {
            $LocalVarQueryParameters['updated_to'] = $UpdatedTo
        }

        if ($DiscoveredDateOrder) {
            $LocalVarQueryParameters['discoveredDateOrder'] = $DiscoveredDateOrder
        }

        if ($Search) {
            $LocalVarQueryParameters['search'] = $Search
        }

        if ($Types) {
            $LocalVarQueryParameters['types'] = $Types
        }

        if ($HasFinding) {
            $LocalVarQueryParameters['hasFinding'] = $HasFinding
        }

        if ($StartDate) {
            $LocalVarQueryParameters['startDate'] = $StartDate
        }

        if ($EndDate) {
            $LocalVarQueryParameters['endDate'] = $EndDate
        }

        if ($AssetStatuses) {
            $LocalVarQueryParameters['assetStatuses'] = $AssetStatuses
        }

        if ($BusinessUnitIds) {
            $LocalVarQueryParameters['businessUnitIds'] = $BusinessUnitIds
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedPointOfInterest" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

