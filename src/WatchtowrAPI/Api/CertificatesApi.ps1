#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Get Certificate Details

.DESCRIPTION

No description available.

.PARAMETER Id
The asset ID of the certificate to retrieve.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ClientServiceInformationResponseData
#>
function Get-CertificateDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Decimal]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-CertificateDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/client/certificates/show/{id}'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling getCertificateDetails."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ClientServiceInformationResponseData" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

List Certificates

.DESCRIPTION

No description available.

.PARAMETER Page
The page number for paginated results. If the page field is not provided in the request, it defaults to 1, which corresponds to the first page of results.

.PARAMETER PageSize
The number of items to be included on each page of paginated results. If the pageSize field is not specified, it defaults to 10. The maximum for pageSize is 30.

.PARAMETER CreatedFrom
Filter certificates created after a given date and time.

.PARAMETER CreatedTo
Filter certificates created before a given date and time.

.PARAMETER UpdatedFrom
Filter certificates updated after a given date and time.

.PARAMETER UpdatedTo
Filter certificates updated before a given date and time.

.PARAMETER NotAfterFrom
Filter certificates that do not expire after a given date and time.

.PARAMETER NotAfterTo
Filter certificates that do not expire before a given date and time.

.PARAMETER SubjectCommonNameSearch
Search certificates by Subject Common Name.

.PARAMETER SubjectAltNameSearch
Search certificates by Subject Alt Name.

.PARAMETER SubjectOrganisationSearch
Search by subject organization.

.PARAMETER SubjectCountries
Filter certificates by a list of comma separated subject countries that they're related to.

.PARAMETER AssetNameSearch
Search Certificates by the name of the associated asset.

.PARAMETER Statuses
Filter certificates by a list of comma separated statuses that they're tagged with.

.PARAMETER BusinessUnitIds
Filter certificates by a list of comma separated business unit IDs they're related to.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedServiceInformationResponse
#>
function Get-ListCertificates {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${Page},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Decimal]]
        ${PageSize},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedFrom},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedTo},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedFrom},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${UpdatedTo},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${NotAfterFrom},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${NotAfterTo},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SubjectCommonNameSearch},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SubjectAltNameSearch},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SubjectOrganisationSearch},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SubjectCountries},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AssetNameSearch},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Statuses},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BusinessUnitIds},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-ListCertificates' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/client/certificates/list'

        if ($Page) {
            $LocalVarQueryParameters['page'] = $Page
        }

        if ($PageSize) {
            $LocalVarQueryParameters['pageSize'] = $PageSize
        }

        if ($CreatedFrom) {
            $LocalVarQueryParameters['created_from'] = $CreatedFrom
        }

        if ($CreatedTo) {
            $LocalVarQueryParameters['created_to'] = $CreatedTo
        }

        if ($UpdatedFrom) {
            $LocalVarQueryParameters['updated_from'] = $UpdatedFrom
        }

        if ($UpdatedTo) {
            $LocalVarQueryParameters['updated_to'] = $UpdatedTo
        }

        if ($NotAfterFrom) {
            $LocalVarQueryParameters['not_after_from'] = $NotAfterFrom
        }

        if ($NotAfterTo) {
            $LocalVarQueryParameters['not_after_to'] = $NotAfterTo
        }

        if ($SubjectCommonNameSearch) {
            $LocalVarQueryParameters['subjectCommonNameSearch'] = $SubjectCommonNameSearch
        }

        if ($SubjectAltNameSearch) {
            $LocalVarQueryParameters['subjectAltNameSearch'] = $SubjectAltNameSearch
        }

        if ($SubjectOrganisationSearch) {
            $LocalVarQueryParameters['subjectOrganisationSearch'] = $SubjectOrganisationSearch
        }

        if ($SubjectCountries) {
            $LocalVarQueryParameters['subjectCountries'] = $SubjectCountries
        }

        if ($AssetNameSearch) {
            $LocalVarQueryParameters['assetNameSearch'] = $AssetNameSearch
        }

        if ($Statuses) {
            $LocalVarQueryParameters['statuses'] = $Statuses
        }

        if ($BusinessUnitIds) {
            $LocalVarQueryParameters['businessUnitIds'] = $BusinessUnitIds
        }

        if ($Configuration["AccessToken"]) {
            $LocalVarHeaderParameters['Authorization'] = "Bearer " + $Configuration["AccessToken"]
            Write-Verbose ("Using Bearer authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedServiceInformationResponse" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

