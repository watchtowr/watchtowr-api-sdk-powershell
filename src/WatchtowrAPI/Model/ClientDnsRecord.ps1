#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
DNS Record ID
.PARAMETER Asset
Asset information
.PARAMETER RecordName
Identifies the resource this record resolves to.
.PARAMETER Type
The DNS record type defines the purpose or function of the record, such as domain name resolution, email routing, and more.
.PARAMETER Ttl
Time to live (TTL) controls how long each record is cached by resolvers.
.PARAMETER Value
The value of a DNS record, depending on the record type. For example, the IP address of the origin server that hosts the web content served by an A or AAAA record.
.PARAMETER CreatedAt
Creation date
.OUTPUTS

ClientDnsRecord<PSCustomObject>
#>

function Initialize-ClientDnsRecord {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Asset},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RecordName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Ttl},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => ClientDnsRecord' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $RecordName) {
            throw "invalid value for 'RecordName', 'RecordName' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Ttl) {
            throw "invalid value for 'Ttl', 'Ttl' cannot be null."
        }

        if ($null -eq $Value) {
            throw "invalid value for 'Value', 'Value' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "asset" = ${Asset}
            "recordName" = ${RecordName}
            "type" = ${Type}
            "ttl" = ${Ttl}
            "value" = ${Value}
            "createdAt" = ${CreatedAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClientDnsRecord<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClientDnsRecord<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClientDnsRecord<PSCustomObject>
#>
function ConvertFrom-JsonToClientDnsRecord {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => ClientDnsRecord' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClientDnsRecord
        $AllProperties = ("id", "asset", "recordName", "type", "ttl", "value", "createdAt")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset"))) {
            throw "Error! JSON cannot be serialized due to the required property 'asset' missing."
        } else {
            $Asset = $JsonParameters.PSobject.Properties["asset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'recordName' missing."
        } else {
            $RecordName = $JsonParameters.PSobject.Properties["recordName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ttl"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ttl' missing."
        } else {
            $Ttl = $JsonParameters.PSobject.Properties["ttl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) {
            throw "Error! JSON cannot be serialized due to the required property 'value' missing."
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "asset" = ${Asset}
            "recordName" = ${RecordName}
            "type" = ${Type}
            "ttl" = ${Ttl}
            "value" = ${Value}
            "createdAt" = ${CreatedAt}
        }

        return $PSO
    }

}

