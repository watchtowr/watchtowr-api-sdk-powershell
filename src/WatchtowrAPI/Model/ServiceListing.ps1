#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
ID
.PARAMETER PortId
Port ID
.PARAMETER Ip
IP Address
.PARAMETER Hostname
Hostname
.PARAMETER Port
Port number
.PARAMETER Type
Port Protocol
.PARAMETER Country
Country code
.PARAMETER Banner
Banner
.PARAMETER Service
Service
.PARAMETER Source
Asset source
.PARAMETER LastSeen
Last seen date Range
.PARAMETER Technologies
Technology list
.PARAMETER ServiceTypes
Service types
.PARAMETER BusinessUnits
Business Units
.PARAMETER IsConcerning
Whether the discovered network service is concerning
.OUTPUTS

ServiceListing<PSCustomObject>
#>

function Initialize-ServiceListing {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${PortId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Ip},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Port},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Country},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Banner},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Service},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Source},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${LastSeen},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Technologies},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ServiceTypes},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${BusinessUnits},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsConcerning}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => ServiceListing' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $PortId) {
            throw "invalid value for 'PortId', 'PortId' cannot be null."
        }

        if ($null -eq $LastSeen) {
            throw "invalid value for 'LastSeen', 'LastSeen' cannot be null."
        }

        if ($null -eq $Technologies) {
            throw "invalid value for 'Technologies', 'Technologies' cannot be null."
        }

        if ($null -eq $ServiceTypes) {
            throw "invalid value for 'ServiceTypes', 'ServiceTypes' cannot be null."
        }

        if ($null -eq $BusinessUnits) {
            throw "invalid value for 'BusinessUnits', 'BusinessUnits' cannot be null."
        }

        if ($null -eq $IsConcerning) {
            throw "invalid value for 'IsConcerning', 'IsConcerning' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "portId" = ${PortId}
            "ip" = ${Ip}
            "hostname" = ${Hostname}
            "port" = ${Port}
            "type" = ${Type}
            "country" = ${Country}
            "banner" = ${Banner}
            "service" = ${Service}
            "source" = ${Source}
            "lastSeen" = ${LastSeen}
            "technologies" = ${Technologies}
            "serviceTypes" = ${ServiceTypes}
            "businessUnits" = ${BusinessUnits}
            "isConcerning" = ${IsConcerning}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServiceListing<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServiceListing<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServiceListing<PSCustomObject>
#>
function ConvertFrom-JsonToServiceListing {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => ServiceListing' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ServiceListing
        $AllProperties = ("id", "portId", "ip", "hostname", "port", "type", "country", "banner", "service", "source", "lastSeen", "technologies", "serviceTypes", "businessUnits", "isConcerning")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "portId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'portId' missing."
        } else {
            $PortId = $JsonParameters.PSobject.Properties["portId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ip' missing."
        } else {
            $Ip = $JsonParameters.PSobject.Properties["ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostname"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hostname' missing."
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSeen"))) {
            throw "Error! JSON cannot be serialized due to the required property 'lastSeen' missing."
        } else {
            $LastSeen = $JsonParameters.PSobject.Properties["lastSeen"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "technologies"))) {
            throw "Error! JSON cannot be serialized due to the required property 'technologies' missing."
        } else {
            $Technologies = $JsonParameters.PSobject.Properties["technologies"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceTypes"))) {
            throw "Error! JSON cannot be serialized due to the required property 'serviceTypes' missing."
        } else {
            $ServiceTypes = $JsonParameters.PSobject.Properties["serviceTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessUnits"))) {
            throw "Error! JSON cannot be serialized due to the required property 'businessUnits' missing."
        } else {
            $BusinessUnits = $JsonParameters.PSobject.Properties["businessUnits"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isConcerning"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isConcerning' missing."
        } else {
            $IsConcerning = $JsonParameters.PSobject.Properties["isConcerning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port"))) { #optional property not found
            $Port = $null
        } else {
            $Port = $JsonParameters.PSobject.Properties["port"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country"))) { #optional property not found
            $Country = $null
        } else {
            $Country = $JsonParameters.PSobject.Properties["country"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "banner"))) { #optional property not found
            $Banner = $null
        } else {
            $Banner = $JsonParameters.PSobject.Properties["banner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "service"))) { #optional property not found
            $Service = $null
        } else {
            $Service = $JsonParameters.PSobject.Properties["service"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "portId" = ${PortId}
            "ip" = ${Ip}
            "hostname" = ${Hostname}
            "port" = ${Port}
            "type" = ${Type}
            "country" = ${Country}
            "banner" = ${Banner}
            "service" = ${Service}
            "source" = ${Source}
            "lastSeen" = ${LastSeen}
            "technologies" = ${Technologies}
            "serviceTypes" = ${ServiceTypes}
            "businessUnits" = ${BusinessUnits}
            "isConcerning" = ${IsConcerning}
        }

        return $PSO
    }

}

