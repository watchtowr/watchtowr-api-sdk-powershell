#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Hunt identifier
.PARAMETER Title
Hunt title
.PARAMETER Status
Hunt status
.PARAMETER TotalFindings
Number of findings discovered
.PARAMETER TotalAssets
Number of assets affected
.PARAMETER NeedInvestigation
Whether manual investigation is required
.PARAMETER RequestType
Type of hunt request
.PARAMETER ResolvedStatus
Whether the hunt has been resolved
.PARAMETER Acknowledgement
Hunt acknowledgement data
.PARAMETER ThreatActors
Associated threat actors
.OUTPUTS

LatestExecutedHuntDto<PSCustomObject>
#>

function Initialize-LatestExecutedHuntDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("in-progress", "completed")]
        [String]
        ${Status},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${TotalFindings},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${TotalAssets},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${NeedInvestigation},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Misconfig", "Others", "SoftwareVulnerability", "ThreatIntelligence")]
        [String]
        ${RequestType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${ResolvedStatus},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Acknowledgement},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ThreatActors}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => LatestExecutedHuntDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Title) {
            throw "invalid value for 'Title', 'Title' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $TotalFindings) {
            throw "invalid value for 'TotalFindings', 'TotalFindings' cannot be null."
        }

        if ($null -eq $TotalAssets) {
            throw "invalid value for 'TotalAssets', 'TotalAssets' cannot be null."
        }

        if ($null -eq $NeedInvestigation) {
            throw "invalid value for 'NeedInvestigation', 'NeedInvestigation' cannot be null."
        }

        if ($null -eq $RequestType) {
            throw "invalid value for 'RequestType', 'RequestType' cannot be null."
        }

        if ($null -eq $ResolvedStatus) {
            throw "invalid value for 'ResolvedStatus', 'ResolvedStatus' cannot be null."
        }

        if ($null -eq $Acknowledgement) {
            throw "invalid value for 'Acknowledgement', 'Acknowledgement' cannot be null."
        }

        if ($null -eq $ThreatActors) {
            throw "invalid value for 'ThreatActors', 'ThreatActors' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "title" = ${Title}
            "status" = ${Status}
            "totalFindings" = ${TotalFindings}
            "totalAssets" = ${TotalAssets}
            "needInvestigation" = ${NeedInvestigation}
            "requestType" = ${RequestType}
            "resolvedStatus" = ${ResolvedStatus}
            "acknowledgement" = ${Acknowledgement}
            "threatActors" = ${ThreatActors}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LatestExecutedHuntDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to LatestExecutedHuntDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LatestExecutedHuntDto<PSCustomObject>
#>
function ConvertFrom-JsonToLatestExecutedHuntDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => LatestExecutedHuntDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LatestExecutedHuntDto
        $AllProperties = ("id", "title", "status", "totalFindings", "totalAssets", "needInvestigation", "requestType", "resolvedStatus", "acknowledgement", "threatActors")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) {
            throw "Error! JSON cannot be serialized due to the required property 'title' missing."
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalFindings"))) {
            throw "Error! JSON cannot be serialized due to the required property 'totalFindings' missing."
        } else {
            $TotalFindings = $JsonParameters.PSobject.Properties["totalFindings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalAssets"))) {
            throw "Error! JSON cannot be serialized due to the required property 'totalAssets' missing."
        } else {
            $TotalAssets = $JsonParameters.PSobject.Properties["totalAssets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "needInvestigation"))) {
            throw "Error! JSON cannot be serialized due to the required property 'needInvestigation' missing."
        } else {
            $NeedInvestigation = $JsonParameters.PSobject.Properties["needInvestigation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'requestType' missing."
        } else {
            $RequestType = $JsonParameters.PSobject.Properties["requestType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resolvedStatus"))) {
            throw "Error! JSON cannot be serialized due to the required property 'resolvedStatus' missing."
        } else {
            $ResolvedStatus = $JsonParameters.PSobject.Properties["resolvedStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "acknowledgement"))) {
            throw "Error! JSON cannot be serialized due to the required property 'acknowledgement' missing."
        } else {
            $Acknowledgement = $JsonParameters.PSobject.Properties["acknowledgement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "threatActors"))) {
            throw "Error! JSON cannot be serialized due to the required property 'threatActors' missing."
        } else {
            $ThreatActors = $JsonParameters.PSobject.Properties["threatActors"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "title" = ${Title}
            "status" = ${Status}
            "totalFindings" = ${TotalFindings}
            "totalAssets" = ${TotalAssets}
            "needInvestigation" = ${NeedInvestigation}
            "requestType" = ${RequestType}
            "resolvedStatus" = ${ResolvedStatus}
            "acknowledgement" = ${Acknowledgement}
            "threatActors" = ${ThreatActors}
        }

        return $PSO
    }

}

