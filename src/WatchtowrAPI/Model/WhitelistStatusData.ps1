#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Enabled
Current whitelisting status
.OUTPUTS

WhitelistStatusData<PSCustomObject>
#>

function Initialize-WhitelistStatusData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Enabled}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => WhitelistStatusData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Enabled) {
            throw "invalid value for 'Enabled', 'Enabled' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "enabled" = ${Enabled}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WhitelistStatusData<PSCustomObject>

.DESCRIPTION

Convert from JSON to WhitelistStatusData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WhitelistStatusData<PSCustomObject>
#>
function ConvertFrom-JsonToWhitelistStatusData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => WhitelistStatusData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WhitelistStatusData
        $AllProperties = ("enabled")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'enabled' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) {
            throw "Error! JSON cannot be serialized due to the required property 'enabled' missing."
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        $PSO = [PSCustomObject]@{
            "enabled" = ${Enabled}
        }

        return $PSO
    }

}

