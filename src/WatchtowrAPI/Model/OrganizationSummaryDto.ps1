#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AttackSurface
Attack surface metrics
.PARAMETER OpenFindings
Breakdown of findings by severity level
.PARAMETER MttrMetrics
Mean Time To Remediation metrics
.PARAMETER FindingsSummary
Historical and categorized finding metrics
.OUTPUTS

OrganizationSummaryDto<PSCustomObject>
#>

function Initialize-OrganizationSummaryDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AttackSurface},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OpenFindings},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MttrMetrics},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FindingsSummary}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => OrganizationSummaryDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $AttackSurface) {
            throw "invalid value for 'AttackSurface', 'AttackSurface' cannot be null."
        }

        if ($null -eq $OpenFindings) {
            throw "invalid value for 'OpenFindings', 'OpenFindings' cannot be null."
        }

        if ($null -eq $MttrMetrics) {
            throw "invalid value for 'MttrMetrics', 'MttrMetrics' cannot be null."
        }

        if ($null -eq $FindingsSummary) {
            throw "invalid value for 'FindingsSummary', 'FindingsSummary' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "attackSurface" = ${AttackSurface}
            "openFindings" = ${OpenFindings}
            "mttrMetrics" = ${MttrMetrics}
            "findingsSummary" = ${FindingsSummary}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrganizationSummaryDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrganizationSummaryDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrganizationSummaryDto<PSCustomObject>
#>
function ConvertFrom-JsonToOrganizationSummaryDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => OrganizationSummaryDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrganizationSummaryDto
        $AllProperties = ("attackSurface", "openFindings", "mttrMetrics", "findingsSummary")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'attackSurface' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attackSurface"))) {
            throw "Error! JSON cannot be serialized due to the required property 'attackSurface' missing."
        } else {
            $AttackSurface = $JsonParameters.PSobject.Properties["attackSurface"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "openFindings"))) {
            throw "Error! JSON cannot be serialized due to the required property 'openFindings' missing."
        } else {
            $OpenFindings = $JsonParameters.PSobject.Properties["openFindings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mttrMetrics"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mttrMetrics' missing."
        } else {
            $MttrMetrics = $JsonParameters.PSobject.Properties["mttrMetrics"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "findingsSummary"))) {
            throw "Error! JSON cannot be serialized due to the required property 'findingsSummary' missing."
        } else {
            $FindingsSummary = $JsonParameters.PSobject.Properties["findingsSummary"].value
        }

        $PSO = [PSCustomObject]@{
            "attackSurface" = ${AttackSurface}
            "openFindings" = ${OpenFindings}
            "mttrMetrics" = ${MttrMetrics}
            "findingsSummary" = ${FindingsSummary}
        }

        return $PSO
    }

}

