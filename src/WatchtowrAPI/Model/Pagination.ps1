#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Total
No description available.
.PARAMETER Count
No description available.
.PARAMETER PerPage
No description available.
.PARAMETER CurrentPage
No description available.
.PARAMETER TotalPages
No description available.
.PARAMETER Links
No description available.
.OUTPUTS

Pagination<PSCustomObject>
#>

function Initialize-Pagination {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Total},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Count},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${PerPage},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${CurrentPage},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${TotalPages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Links}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => Pagination' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Total) {
            throw "invalid value for 'Total', 'Total' cannot be null."
        }

        if ($null -eq $Count) {
            throw "invalid value for 'Count', 'Count' cannot be null."
        }

        if ($null -eq $PerPage) {
            throw "invalid value for 'PerPage', 'PerPage' cannot be null."
        }

        if ($null -eq $CurrentPage) {
            throw "invalid value for 'CurrentPage', 'CurrentPage' cannot be null."
        }

        if ($null -eq $TotalPages) {
            throw "invalid value for 'TotalPages', 'TotalPages' cannot be null."
        }

        if ($null -eq $Links) {
            throw "invalid value for 'Links', 'Links' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "total" = ${Total}
            "count" = ${Count}
            "per_page" = ${PerPage}
            "current_page" = ${CurrentPage}
            "total_pages" = ${TotalPages}
            "links" = ${Links}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Pagination<PSCustomObject>

.DESCRIPTION

Convert from JSON to Pagination<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Pagination<PSCustomObject>
#>
function ConvertFrom-JsonToPagination {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => Pagination' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Pagination
        $AllProperties = ("total", "count", "per_page", "current_page", "total_pages", "links")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'total' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) {
            throw "Error! JSON cannot be serialized due to the required property 'total' missing."
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'count' missing."
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "per_page"))) {
            throw "Error! JSON cannot be serialized due to the required property 'per_page' missing."
        } else {
            $PerPage = $JsonParameters.PSobject.Properties["per_page"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "current_page"))) {
            throw "Error! JSON cannot be serialized due to the required property 'current_page' missing."
        } else {
            $CurrentPage = $JsonParameters.PSobject.Properties["current_page"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_pages"))) {
            throw "Error! JSON cannot be serialized due to the required property 'total_pages' missing."
        } else {
            $TotalPages = $JsonParameters.PSobject.Properties["total_pages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "links"))) {
            throw "Error! JSON cannot be serialized due to the required property 'links' missing."
        } else {
            $Links = $JsonParameters.PSobject.Properties["links"].value
        }

        $PSO = [PSCustomObject]@{
            "total" = ${Total}
            "count" = ${Count}
            "per_page" = ${PerPage}
            "current_page" = ${CurrentPage}
            "total_pages" = ${TotalPages}
            "links" = ${Links}
        }

        return $PSO
    }

}

