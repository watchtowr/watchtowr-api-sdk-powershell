#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Type
No description available.
.PARAMETER Name
No description available.
.PARAMETER Source
No description available.
.PARAMETER Provider
No description available.
.PARAMETER SuperType
No description available.
.PARAMETER SubType
No description available.
.PARAMETER Hostname
No description available.
.PARAMETER CloudResourceId
No description available.
.PARAMETER CreatedAt
No description available.
.PARAMETER UpdatedAt
No description available.
.PARAMETER DeletedAt
No description available.
.PARAMETER Metadata
No description available.
.PARAMETER CustomProperties
No description available.
.PARAMETER Criticality
No description available.
.OUTPUTS

ClientCloudAsset<PSCustomObject>
#>

function Initialize-ClientCloudAsset {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Source},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Provider},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SuperType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hostname},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CloudResourceId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreatedAt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UpdatedAt},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DeletedAt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Metadata},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CustomProperties},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Criticality}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => ClientCloudAsset' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Source) {
            throw "invalid value for 'Source', 'Source' cannot be null."
        }

        if ($null -eq $Provider) {
            throw "invalid value for 'Provider', 'Provider' cannot be null."
        }

        if ($null -eq $SuperType) {
            throw "invalid value for 'SuperType', 'SuperType' cannot be null."
        }

        if ($null -eq $SubType) {
            throw "invalid value for 'SubType', 'SubType' cannot be null."
        }

        if ($null -eq $Hostname) {
            throw "invalid value for 'Hostname', 'Hostname' cannot be null."
        }

        if ($null -eq $CloudResourceId) {
            throw "invalid value for 'CloudResourceId', 'CloudResourceId' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($null -eq $UpdatedAt) {
            throw "invalid value for 'UpdatedAt', 'UpdatedAt' cannot be null."
        }

        if ($null -eq $DeletedAt) {
            throw "invalid value for 'DeletedAt', 'DeletedAt' cannot be null."
        }

        if ($null -eq $Metadata) {
            throw "invalid value for 'Metadata', 'Metadata' cannot be null."
        }

        if ($null -eq $CustomProperties) {
            throw "invalid value for 'CustomProperties', 'CustomProperties' cannot be null."
        }

        if ($null -eq $Criticality) {
            throw "invalid value for 'Criticality', 'Criticality' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "name" = ${Name}
            "source" = ${Source}
            "provider" = ${Provider}
            "super_type" = ${SuperType}
            "sub_type" = ${SubType}
            "hostname" = ${Hostname}
            "cloud_resource_id" = ${CloudResourceId}
            "created_at" = ${CreatedAt}
            "updated_at" = ${UpdatedAt}
            "deleted_at" = ${DeletedAt}
            "metadata" = ${Metadata}
            "customProperties" = ${CustomProperties}
            "criticality" = ${Criticality}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClientCloudAsset<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClientCloudAsset<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClientCloudAsset<PSCustomObject>
#>
function ConvertFrom-JsonToClientCloudAsset {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => ClientCloudAsset' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClientCloudAsset
        $AllProperties = ("type", "name", "source", "provider", "super_type", "sub_type", "hostname", "cloud_resource_id", "created_at", "updated_at", "deleted_at", "metadata", "customProperties", "criticality")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) {
            throw "Error! JSON cannot be serialized due to the required property 'source' missing."
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provider"))) {
            throw "Error! JSON cannot be serialized due to the required property 'provider' missing."
        } else {
            $Provider = $JsonParameters.PSobject.Properties["provider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "super_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'super_type' missing."
        } else {
            $SuperType = $JsonParameters.PSobject.Properties["super_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sub_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sub_type' missing."
        } else {
            $SubType = $JsonParameters.PSobject.Properties["sub_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostname"))) {
            throw "Error! JSON cannot be serialized due to the required property 'hostname' missing."
        } else {
            $Hostname = $JsonParameters.PSobject.Properties["hostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cloud_resource_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cloud_resource_id' missing."
        } else {
            $CloudResourceId = $JsonParameters.PSobject.Properties["cloud_resource_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created_at' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'updated_at' missing."
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["updated_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deleted_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'deleted_at' missing."
        } else {
            $DeletedAt = $JsonParameters.PSobject.Properties["deleted_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) {
            throw "Error! JSON cannot be serialized due to the required property 'metadata' missing."
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customProperties"))) {
            throw "Error! JSON cannot be serialized due to the required property 'customProperties' missing."
        } else {
            $CustomProperties = $JsonParameters.PSobject.Properties["customProperties"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "criticality"))) {
            throw "Error! JSON cannot be serialized due to the required property 'criticality' missing."
        } else {
            $Criticality = $JsonParameters.PSobject.Properties["criticality"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "name" = ${Name}
            "source" = ${Source}
            "provider" = ${Provider}
            "super_type" = ${SuperType}
            "sub_type" = ${SubType}
            "hostname" = ${Hostname}
            "cloud_resource_id" = ${CloudResourceId}
            "created_at" = ${CreatedAt}
            "updated_at" = ${UpdatedAt}
            "deleted_at" = ${DeletedAt}
            "metadata" = ${Metadata}
            "customProperties" = ${CustomProperties}
            "criticality" = ${Criticality}
        }

        return $PSO
    }

}

