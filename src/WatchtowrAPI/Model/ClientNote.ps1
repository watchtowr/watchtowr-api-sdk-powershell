#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Note
No description available.
.PARAMETER NoteType
No description available.
.PARAMETER NoteId
No description available.
.PARAMETER Title
No description available.
.PARAMETER Author
No description available.
.PARAMETER LastModified
No description available.
.OUTPUTS

ClientNote<PSCustomObject>
#>

function Initialize-ClientNote {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Note},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NoteType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${NoteId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Author},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastModified}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => ClientNote' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Note) {
            throw "invalid value for 'Note', 'Note' cannot be null."
        }

        if ($null -eq $NoteType) {
            throw "invalid value for 'NoteType', 'NoteType' cannot be null."
        }

        if ($null -eq $NoteId) {
            throw "invalid value for 'NoteId', 'NoteId' cannot be null."
        }

        if ($null -eq $Title) {
            throw "invalid value for 'Title', 'Title' cannot be null."
        }

        if ($null -eq $Author) {
            throw "invalid value for 'Author', 'Author' cannot be null."
        }

        if ($null -eq $LastModified) {
            throw "invalid value for 'LastModified', 'LastModified' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "note" = ${Note}
            "note_type" = ${NoteType}
            "note_id" = ${NoteId}
            "title" = ${Title}
            "author" = ${Author}
            "last_modified" = ${LastModified}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClientNote<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClientNote<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClientNote<PSCustomObject>
#>
function ConvertFrom-JsonToClientNote {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => ClientNote' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClientNote
        $AllProperties = ("id", "note", "note_type", "note_id", "title", "author", "last_modified")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "note"))) {
            throw "Error! JSON cannot be serialized due to the required property 'note' missing."
        } else {
            $Note = $JsonParameters.PSobject.Properties["note"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "note_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'note_type' missing."
        } else {
            $NoteType = $JsonParameters.PSobject.Properties["note_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "note_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'note_id' missing."
        } else {
            $NoteId = $JsonParameters.PSobject.Properties["note_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) {
            throw "Error! JSON cannot be serialized due to the required property 'title' missing."
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "author"))) {
            throw "Error! JSON cannot be serialized due to the required property 'author' missing."
        } else {
            $Author = $JsonParameters.PSobject.Properties["author"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_modified"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_modified' missing."
        } else {
            $LastModified = $JsonParameters.PSobject.Properties["last_modified"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "note" = ${Note}
            "note_type" = ${NoteType}
            "note_id" = ${NoteId}
            "title" = ${Title}
            "author" = ${Author}
            "last_modified" = ${LastModified}
        }

        return $PSO
    }

}

