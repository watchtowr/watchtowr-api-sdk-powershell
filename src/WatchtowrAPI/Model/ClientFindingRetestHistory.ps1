#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Retest ID
.PARAMETER Finding
Finding information
.PARAMETER Asset
Affected asset information
.PARAMETER TriggeredBy
User who triggered the retest
.PARAMETER CurrentRetestStatus
Current retest status
.PARAMETER StartedAt
Date and time when the retest was started
.PARAMETER CompletedAt
Date and time when the retest was completed
.PARAMETER UpdatedAt
Date and time when the retest was last updated
.PARAMETER CreatedAt
Creation date
.OUTPUTS

ClientFindingRetestHistory<PSCustomObject>
#>

function Initialize-ClientFindingRetestHistory {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Finding},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Asset},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TriggeredBy},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("started", "in-progress", "success", "error")]
        [String]
        ${CurrentRetestStatus},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${StartedAt},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CompletedAt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${UpdatedAt},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => ClientFindingRetestHistory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $CurrentRetestStatus) {
            throw "invalid value for 'CurrentRetestStatus', 'CurrentRetestStatus' cannot be null."
        }

        if ($null -eq $StartedAt) {
            throw "invalid value for 'StartedAt', 'StartedAt' cannot be null."
        }

        if ($null -eq $UpdatedAt) {
            throw "invalid value for 'UpdatedAt', 'UpdatedAt' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "finding" = ${Finding}
            "asset" = ${Asset}
            "triggeredBy" = ${TriggeredBy}
            "currentRetestStatus" = ${CurrentRetestStatus}
            "startedAt" = ${StartedAt}
            "completedAt" = ${CompletedAt}
            "updatedAt" = ${UpdatedAt}
            "createdAt" = ${CreatedAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClientFindingRetestHistory<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClientFindingRetestHistory<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClientFindingRetestHistory<PSCustomObject>
#>
function ConvertFrom-JsonToClientFindingRetestHistory {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => ClientFindingRetestHistory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClientFindingRetestHistory
        $AllProperties = ("id", "finding", "asset", "triggeredBy", "currentRetestStatus", "startedAt", "completedAt", "updatedAt", "createdAt")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "finding"))) {
            throw "Error! JSON cannot be serialized due to the required property 'finding' missing."
        } else {
            $Finding = $JsonParameters.PSobject.Properties["finding"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset"))) {
            throw "Error! JSON cannot be serialized due to the required property 'asset' missing."
        } else {
            $Asset = $JsonParameters.PSobject.Properties["asset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "triggeredBy"))) {
            throw "Error! JSON cannot be serialized due to the required property 'triggeredBy' missing."
        } else {
            $TriggeredBy = $JsonParameters.PSobject.Properties["triggeredBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currentRetestStatus"))) {
            throw "Error! JSON cannot be serialized due to the required property 'currentRetestStatus' missing."
        } else {
            $CurrentRetestStatus = $JsonParameters.PSobject.Properties["currentRetestStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startedAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'startedAt' missing."
        } else {
            $StartedAt = $JsonParameters.PSobject.Properties["startedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "completedAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'completedAt' missing."
        } else {
            $CompletedAt = $JsonParameters.PSobject.Properties["completedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updatedAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'updatedAt' missing."
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["updatedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "finding" = ${Finding}
            "asset" = ${Asset}
            "triggeredBy" = ${TriggeredBy}
            "currentRetestStatus" = ${CurrentRetestStatus}
            "startedAt" = ${StartedAt}
            "completedAt" = ${CompletedAt}
            "updatedAt" = ${UpdatedAt}
            "createdAt" = ${CreatedAt}
        }

        return $PSO
    }

}

