#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AdversarySightEnabled
This setting manages the Adversary Sight engine coverage for the asset.
.PARAMETER DnsBruteforcingEnabled
This setting manages the DNS Bruteforcing engine coverage for the asset.
.PARAMETER AutomatedRedTeamingEnabled
This setting manages the Automated Red Teaming engine coverage for the asset.
.PARAMETER CredentialStuffingEnabled
This setting manages the Credential Stuffing engine coverage for the asset.
.PARAMETER RapidReactionEnabled
 This setting manages the Rapid Reaction engine coverage for the asset
.OUTPUTS

UpdateClientEngineSettingsDto<PSCustomObject>
#>

function Initialize-UpdateClientEngineSettingsDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${AdversarySightEnabled},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${DnsBruteforcingEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${AutomatedRedTeamingEnabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${CredentialStuffingEnabled},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${RapidReactionEnabled}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => UpdateClientEngineSettingsDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $AdversarySightEnabled) {
            throw "invalid value for 'AdversarySightEnabled', 'AdversarySightEnabled' cannot be null."
        }

        if ($null -eq $DnsBruteforcingEnabled) {
            throw "invalid value for 'DnsBruteforcingEnabled', 'DnsBruteforcingEnabled' cannot be null."
        }

        if ($null -eq $AutomatedRedTeamingEnabled) {
            throw "invalid value for 'AutomatedRedTeamingEnabled', 'AutomatedRedTeamingEnabled' cannot be null."
        }

        if ($null -eq $CredentialStuffingEnabled) {
            throw "invalid value for 'CredentialStuffingEnabled', 'CredentialStuffingEnabled' cannot be null."
        }

        if ($null -eq $RapidReactionEnabled) {
            throw "invalid value for 'RapidReactionEnabled', 'RapidReactionEnabled' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "adversarySightEnabled" = ${AdversarySightEnabled}
            "dnsBruteforcingEnabled" = ${DnsBruteforcingEnabled}
            "automatedRedTeamingEnabled" = ${AutomatedRedTeamingEnabled}
            "credentialStuffingEnabled" = ${CredentialStuffingEnabled}
            "rapidReactionEnabled" = ${RapidReactionEnabled}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateClientEngineSettingsDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateClientEngineSettingsDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateClientEngineSettingsDto<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateClientEngineSettingsDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => UpdateClientEngineSettingsDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateClientEngineSettingsDto
        $AllProperties = ("adversarySightEnabled", "dnsBruteforcingEnabled", "automatedRedTeamingEnabled", "credentialStuffingEnabled", "rapidReactionEnabled")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'adversarySightEnabled' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "adversarySightEnabled"))) {
            throw "Error! JSON cannot be serialized due to the required property 'adversarySightEnabled' missing."
        } else {
            $AdversarySightEnabled = $JsonParameters.PSobject.Properties["adversarySightEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsBruteforcingEnabled"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dnsBruteforcingEnabled' missing."
        } else {
            $DnsBruteforcingEnabled = $JsonParameters.PSobject.Properties["dnsBruteforcingEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "automatedRedTeamingEnabled"))) {
            throw "Error! JSON cannot be serialized due to the required property 'automatedRedTeamingEnabled' missing."
        } else {
            $AutomatedRedTeamingEnabled = $JsonParameters.PSobject.Properties["automatedRedTeamingEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "credentialStuffingEnabled"))) {
            throw "Error! JSON cannot be serialized due to the required property 'credentialStuffingEnabled' missing."
        } else {
            $CredentialStuffingEnabled = $JsonParameters.PSobject.Properties["credentialStuffingEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rapidReactionEnabled"))) {
            throw "Error! JSON cannot be serialized due to the required property 'rapidReactionEnabled' missing."
        } else {
            $RapidReactionEnabled = $JsonParameters.PSobject.Properties["rapidReactionEnabled"].value
        }

        $PSO = [PSCustomObject]@{
            "adversarySightEnabled" = ${AdversarySightEnabled}
            "dnsBruteforcingEnabled" = ${DnsBruteforcingEnabled}
            "automatedRedTeamingEnabled" = ${AutomatedRedTeamingEnabled}
            "credentialStuffingEnabled" = ${CredentialStuffingEnabled}
            "rapidReactionEnabled" = ${RapidReactionEnabled}
        }

        return $PSO
    }

}

