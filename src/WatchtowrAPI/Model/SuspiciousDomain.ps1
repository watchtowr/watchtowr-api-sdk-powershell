#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
ID
.PARAMETER Name
Name
.PARAMETER DiscoveryReason
Discovery Reason
.PARAMETER Status
No description available.
.PARAMETER WhoisData
No description available.
.PARAMETER CreatedAt
Discovery date
.OUTPUTS

SuspiciousDomain<PSCustomObject>
#>

function Initialize-SuspiciousDomain {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscoveryReason},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("pending", "malicious", "legitimate", "benign")]
        [String]
        ${Status},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${WhoisData},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedAt}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => SuspiciousDomain' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $DiscoveryReason) {
            throw "invalid value for 'DiscoveryReason', 'DiscoveryReason' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $WhoisData) {
            throw "invalid value for 'WhoisData', 'WhoisData' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "discovery_reason" = ${DiscoveryReason}
            "status" = ${Status}
            "whoisData" = ${WhoisData}
            "created_at" = ${CreatedAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SuspiciousDomain<PSCustomObject>

.DESCRIPTION

Convert from JSON to SuspiciousDomain<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SuspiciousDomain<PSCustomObject>
#>
function ConvertFrom-JsonToSuspiciousDomain {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => SuspiciousDomain' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SuspiciousDomain
        $AllProperties = ("id", "name", "discovery_reason", "status", "whoisData", "created_at")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discovery_reason"))) {
            throw "Error! JSON cannot be serialized due to the required property 'discovery_reason' missing."
        } else {
            $DiscoveryReason = $JsonParameters.PSobject.Properties["discovery_reason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "whoisData"))) {
            throw "Error! JSON cannot be serialized due to the required property 'whoisData' missing."
        } else {
            $WhoisData = $JsonParameters.PSobject.Properties["whoisData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) { #optional property not found
            $CreatedAt = $null
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "discovery_reason" = ${DiscoveryReason}
            "status" = ${Status}
            "whoisData" = ${WhoisData}
            "created_at" = ${CreatedAt}
        }

        return $PSO
    }

}

