#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
ID
.PARAMETER Name
Name
.PARAMETER Type
Type
.PARAMETER Url
Url
.PARAMETER DiscoveryToolId
Discovery tool ID
.PARAMETER DiscoveryDate
Discovery date
.PARAMETER AssetId
Asset ID
.PARAMETER AssetName
Asset name
.PARAMETER AssetType
Asset type
.PARAMETER BusinessUnits
Business unit
.PARAMETER LastSeen
Last seen at
.PARAMETER IsConcerning
Whether the Point of Interest is concerning
.OUTPUTS

PointsOfInterest<PSCustomObject>
#>

function Initialize-PointsOfInterest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscoveryToolId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DiscoveryDate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${AssetId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetName},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${BusinessUnits},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastSeen},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsConcerning}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => PointsOfInterest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $DiscoveryToolId) {
            throw "invalid value for 'DiscoveryToolId', 'DiscoveryToolId' cannot be null."
        }

        if ($null -eq $AssetId) {
            throw "invalid value for 'AssetId', 'AssetId' cannot be null."
        }

        if ($null -eq $AssetName) {
            throw "invalid value for 'AssetName', 'AssetName' cannot be null."
        }

        if ($null -eq $AssetType) {
            throw "invalid value for 'AssetType', 'AssetType' cannot be null."
        }

        if ($null -eq $BusinessUnits) {
            throw "invalid value for 'BusinessUnits', 'BusinessUnits' cannot be null."
        }

        if ($null -eq $IsConcerning) {
            throw "invalid value for 'IsConcerning', 'IsConcerning' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
            "url" = ${Url}
            "discoveryToolId" = ${DiscoveryToolId}
            "discoveryDate" = ${DiscoveryDate}
            "assetId" = ${AssetId}
            "assetName" = ${AssetName}
            "assetType" = ${AssetType}
            "businessUnits" = ${BusinessUnits}
            "lastSeen" = ${LastSeen}
            "isConcerning" = ${IsConcerning}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PointsOfInterest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PointsOfInterest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PointsOfInterest<PSCustomObject>
#>
function ConvertFrom-JsonToPointsOfInterest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => PointsOfInterest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PointsOfInterest
        $AllProperties = ("id", "name", "type", "url", "discoveryToolId", "discoveryDate", "assetId", "assetName", "assetType", "businessUnits", "lastSeen", "isConcerning")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discoveryToolId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'discoveryToolId' missing."
        } else {
            $DiscoveryToolId = $JsonParameters.PSobject.Properties["discoveryToolId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assetId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assetId' missing."
        } else {
            $AssetId = $JsonParameters.PSobject.Properties["assetId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assetName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assetName' missing."
        } else {
            $AssetName = $JsonParameters.PSobject.Properties["assetName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assetType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assetType' missing."
        } else {
            $AssetType = $JsonParameters.PSobject.Properties["assetType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessUnits"))) {
            throw "Error! JSON cannot be serialized due to the required property 'businessUnits' missing."
        } else {
            $BusinessUnits = $JsonParameters.PSobject.Properties["businessUnits"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isConcerning"))) {
            throw "Error! JSON cannot be serialized due to the required property 'isConcerning' missing."
        } else {
            $IsConcerning = $JsonParameters.PSobject.Properties["isConcerning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discoveryDate"))) { #optional property not found
            $DiscoveryDate = $null
        } else {
            $DiscoveryDate = $JsonParameters.PSobject.Properties["discoveryDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSeen"))) { #optional property not found
            $LastSeen = $null
        } else {
            $LastSeen = $JsonParameters.PSobject.Properties["lastSeen"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
            "url" = ${Url}
            "discoveryToolId" = ${DiscoveryToolId}
            "discoveryDate" = ${DiscoveryDate}
            "assetId" = ${AssetId}
            "assetName" = ${AssetName}
            "assetType" = ${AssetType}
            "businessUnits" = ${BusinessUnits}
            "lastSeen" = ${LastSeen}
            "isConcerning" = ${IsConcerning}
        }

        return $PSO
    }

}

