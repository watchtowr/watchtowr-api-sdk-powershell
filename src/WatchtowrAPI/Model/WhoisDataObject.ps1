#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Org
org
.PARAMETER City
city
.PARAMETER Name
name
.PARAMETER State
state
.PARAMETER Dnssec
dnssec
.PARAMETER Emails
No description available.
.PARAMETER Status
No description available.
.PARAMETER Address
address
.PARAMETER Country
country
.PARAMETER Zipcode
zipcode
.PARAMETER Registrar
registrar
.PARAMETER DomainName
domain_name
.PARAMETER NameServers
No description available.
.PARAMETER ReferralUrl
referral_url
.PARAMETER WhoisServer
whois_server
.PARAMETER CreationDate
creation_date
.PARAMETER ExpirationDate
expiration_date
.OUTPUTS

WhoisDataObject<PSCustomObject>
#>

function Initialize-WhoisDataObject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Org},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${City},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Dnssec},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Emails},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Country},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Zipcode},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Registrar},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DomainName},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${NameServers},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReferralUrl},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WhoisServer},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreationDate},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExpirationDate}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => WhoisDataObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "org" = ${Org}
            "city" = ${City}
            "name" = ${Name}
            "state" = ${State}
            "dnssec" = ${Dnssec}
            "emails" = ${Emails}
            "status" = ${Status}
            "address" = ${Address}
            "country" = ${Country}
            "zipcode" = ${Zipcode}
            "registrar" = ${Registrar}
            "domain_name" = ${DomainName}
            "name_servers" = ${NameServers}
            "referral_url" = ${ReferralUrl}
            "whois_server" = ${WhoisServer}
            "creation_date" = ${CreationDate}
            "expiration_date" = ${ExpirationDate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WhoisDataObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to WhoisDataObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WhoisDataObject<PSCustomObject>
#>
function ConvertFrom-JsonToWhoisDataObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => WhoisDataObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WhoisDataObject
        $AllProperties = ("org", "city", "name", "state", "dnssec", "emails", "status", "address", "country", "zipcode", "registrar", "domain_name", "name_servers", "referral_url", "whois_server", "creation_date", "expiration_date")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "org"))) { #optional property not found
            $Org = $null
        } else {
            $Org = $JsonParameters.PSobject.Properties["org"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "city"))) { #optional property not found
            $City = $null
        } else {
            $City = $JsonParameters.PSobject.Properties["city"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnssec"))) { #optional property not found
            $Dnssec = $null
        } else {
            $Dnssec = $JsonParameters.PSobject.Properties["dnssec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emails"))) { #optional property not found
            $Emails = $null
        } else {
            $Emails = $JsonParameters.PSobject.Properties["emails"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country"))) { #optional property not found
            $Country = $null
        } else {
            $Country = $JsonParameters.PSobject.Properties["country"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zipcode"))) { #optional property not found
            $Zipcode = $null
        } else {
            $Zipcode = $JsonParameters.PSobject.Properties["zipcode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "registrar"))) { #optional property not found
            $Registrar = $null
        } else {
            $Registrar = $JsonParameters.PSobject.Properties["registrar"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain_name"))) { #optional property not found
            $DomainName = $null
        } else {
            $DomainName = $JsonParameters.PSobject.Properties["domain_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name_servers"))) { #optional property not found
            $NameServers = $null
        } else {
            $NameServers = $JsonParameters.PSobject.Properties["name_servers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "referral_url"))) { #optional property not found
            $ReferralUrl = $null
        } else {
            $ReferralUrl = $JsonParameters.PSobject.Properties["referral_url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "whois_server"))) { #optional property not found
            $WhoisServer = $null
        } else {
            $WhoisServer = $JsonParameters.PSobject.Properties["whois_server"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creation_date"))) { #optional property not found
            $CreationDate = $null
        } else {
            $CreationDate = $JsonParameters.PSobject.Properties["creation_date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expiration_date"))) { #optional property not found
            $ExpirationDate = $null
        } else {
            $ExpirationDate = $JsonParameters.PSobject.Properties["expiration_date"].value
        }

        $PSO = [PSCustomObject]@{
            "org" = ${Org}
            "city" = ${City}
            "name" = ${Name}
            "state" = ${State}
            "dnssec" = ${Dnssec}
            "emails" = ${Emails}
            "status" = ${Status}
            "address" = ${Address}
            "country" = ${Country}
            "zipcode" = ${Zipcode}
            "registrar" = ${Registrar}
            "domain_name" = ${DomainName}
            "name_servers" = ${NameServers}
            "referral_url" = ${ReferralUrl}
            "whois_server" = ${WhoisServer}
            "creation_date" = ${CreationDate}
            "expiration_date" = ${ExpirationDate}
        }

        return $PSO
    }

}

