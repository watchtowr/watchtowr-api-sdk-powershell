#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Critical
Count of critical findings
.PARAMETER High
Count of high severity findings
.PARAMETER Medium
Count of medium severity findings
.PARAMETER Low
Count of low severity findings
.PARAMETER Info
Count of informational findings
.PARAMETER Total
Total count of all open findings
.OUTPUTS

OpenFindingsDto<PSCustomObject>
#>

function Initialize-OpenFindingsDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Critical},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${High},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Medium},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Low},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Info},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Total}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => OpenFindingsDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Critical) {
            throw "invalid value for 'Critical', 'Critical' cannot be null."
        }

        if ($null -eq $High) {
            throw "invalid value for 'High', 'High' cannot be null."
        }

        if ($null -eq $Medium) {
            throw "invalid value for 'Medium', 'Medium' cannot be null."
        }

        if ($null -eq $Low) {
            throw "invalid value for 'Low', 'Low' cannot be null."
        }

        if ($null -eq $Info) {
            throw "invalid value for 'Info', 'Info' cannot be null."
        }

        if ($null -eq $Total) {
            throw "invalid value for 'Total', 'Total' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "critical" = ${Critical}
            "high" = ${High}
            "medium" = ${Medium}
            "low" = ${Low}
            "info" = ${Info}
            "total" = ${Total}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OpenFindingsDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to OpenFindingsDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OpenFindingsDto<PSCustomObject>
#>
function ConvertFrom-JsonToOpenFindingsDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => OpenFindingsDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OpenFindingsDto
        $AllProperties = ("critical", "high", "medium", "low", "info", "total")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'critical' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "critical"))) {
            throw "Error! JSON cannot be serialized due to the required property 'critical' missing."
        } else {
            $Critical = $JsonParameters.PSobject.Properties["critical"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "high"))) {
            throw "Error! JSON cannot be serialized due to the required property 'high' missing."
        } else {
            $High = $JsonParameters.PSobject.Properties["high"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "medium"))) {
            throw "Error! JSON cannot be serialized due to the required property 'medium' missing."
        } else {
            $Medium = $JsonParameters.PSobject.Properties["medium"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "low"))) {
            throw "Error! JSON cannot be serialized due to the required property 'low' missing."
        } else {
            $Low = $JsonParameters.PSobject.Properties["low"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "info"))) {
            throw "Error! JSON cannot be serialized due to the required property 'info' missing."
        } else {
            $Info = $JsonParameters.PSobject.Properties["info"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) {
            throw "Error! JSON cannot be serialized due to the required property 'total' missing."
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        $PSO = [PSCustomObject]@{
            "critical" = ${Critical}
            "high" = ${High}
            "medium" = ${Medium}
            "low" = ${Low}
            "info" = ${Info}
            "total" = ${Total}
        }

        return $PSO
    }

}

