#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Value
Kill switch value (true to enable, false to disable)
.PARAMETER Reason
Reason for enabling the kill switch (required when enabling)
.PARAMETER RequestSupport
Whether to request support from watchTowr (optional, defaults to false)
.OUTPUTS

UpdateKillSwitchRequestDto<PSCustomObject>
#>

function Initialize-UpdateKillSwitchRequestDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Value},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Reason},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RequestSupport}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => UpdateKillSwitchRequestDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Value) {
            throw "invalid value for 'Value', 'Value' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "reason" = ${Reason}
            "requestSupport" = ${RequestSupport}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateKillSwitchRequestDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateKillSwitchRequestDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateKillSwitchRequestDto<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateKillSwitchRequestDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => UpdateKillSwitchRequestDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateKillSwitchRequestDto
        $AllProperties = ("value", "reason", "requestSupport")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'value' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) {
            throw "Error! JSON cannot be serialized due to the required property 'value' missing."
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reason"))) { #optional property not found
            $Reason = $null
        } else {
            $Reason = $JsonParameters.PSobject.Properties["reason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestSupport"))) { #optional property not found
            $RequestSupport = $null
        } else {
            $RequestSupport = $JsonParameters.PSobject.Properties["requestSupport"].value
        }

        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "reason" = ${Reason}
            "requestSupport" = ${RequestSupport}
        }

        return $PSO
    }

}

