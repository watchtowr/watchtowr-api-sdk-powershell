#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
User ID
.PARAMETER Name
User name
.PARAMETER Email
User email (masked)
.PARAMETER Title
User title
.PARAMETER MobilePhoneNumber
Mobile phone number (masked)
.PARAMETER OfficePhoneNumber
Office phone number (masked)
.PARAMETER CreatedAt
Created at timestamp
.PARAMETER Locked
Whether user is locked
.PARAMETER Role
User role information
.OUTPUTS

ClientUserDetail<PSCustomObject>
#>

function Initialize-ClientUserDetail {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MobilePhoneNumber},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OfficePhoneNumber},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Locked},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Role}
    )

    Process {
        'Creating PSCustomObject: WatchtowrAPI => ClientUserDetail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Email) {
            throw "invalid value for 'Email', 'Email' cannot be null."
        }

        if ($null -eq $Title) {
            throw "invalid value for 'Title', 'Title' cannot be null."
        }

        if ($null -eq $MobilePhoneNumber) {
            throw "invalid value for 'MobilePhoneNumber', 'MobilePhoneNumber' cannot be null."
        }

        if ($null -eq $OfficePhoneNumber) {
            throw "invalid value for 'OfficePhoneNumber', 'OfficePhoneNumber' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($null -eq $Locked) {
            throw "invalid value for 'Locked', 'Locked' cannot be null."
        }

        if ($null -eq $Role) {
            throw "invalid value for 'Role', 'Role' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "email" = ${Email}
            "title" = ${Title}
            "mobile_phone_number" = ${MobilePhoneNumber}
            "office_phone_number" = ${OfficePhoneNumber}
            "created_at" = ${CreatedAt}
            "locked" = ${Locked}
            "role" = ${Role}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClientUserDetail<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClientUserDetail<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClientUserDetail<PSCustomObject>
#>
function ConvertFrom-JsonToClientUserDetail {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: WatchtowrAPI => ClientUserDetail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClientUserDetail
        $AllProperties = ("id", "name", "email", "title", "mobile_phone_number", "office_phone_number", "created_at", "locked", "role")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) {
            throw "Error! JSON cannot be serialized due to the required property 'email' missing."
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) {
            throw "Error! JSON cannot be serialized due to the required property 'title' missing."
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mobile_phone_number"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mobile_phone_number' missing."
        } else {
            $MobilePhoneNumber = $JsonParameters.PSobject.Properties["mobile_phone_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "office_phone_number"))) {
            throw "Error! JSON cannot be serialized due to the required property 'office_phone_number' missing."
        } else {
            $OfficePhoneNumber = $JsonParameters.PSobject.Properties["office_phone_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created_at' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locked"))) {
            throw "Error! JSON cannot be serialized due to the required property 'locked' missing."
        } else {
            $Locked = $JsonParameters.PSobject.Properties["locked"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) {
            throw "Error! JSON cannot be serialized due to the required property 'role' missing."
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "email" = ${Email}
            "title" = ${Title}
            "mobile_phone_number" = ${MobilePhoneNumber}
            "office_phone_number" = ${OfficePhoneNumber}
            "created_at" = ${CreatedAt}
            "locked" = ${Locked}
            "role" = ${Role}
        }

        return $PSO
    }

}

