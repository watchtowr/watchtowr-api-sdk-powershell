#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Key
The key of the custom property. Key provided must not be empty and must be unique for the model type. If is_preset is true, key must belong to one of watchTowr's preset custom properties. Accepted preset keys include: 'Criticality'.
.PARAMETER Value
The value of the custom property. If existing custom property's preset is true, the value supplied must belong to one of the valid watchTowr preset values. Accepted preset values are 'Low', 'Medium', 'High', 'Unknown' for key: 'Criticality'.
.PARAMETER IsPreset
Defaults to false. If true, custom property is a watchTowr preset custom property.
.OUTPUTS

CreateClientCustomPropertyDto<PSCustomObject>
#>

function Initialize-CreateClientCustomPropertyDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Value},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPreset}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CreateClientCustomPropertyDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Key) {
            throw "invalid value for 'Key', 'Key' cannot be null."
        }

        if ($null -eq $Value) {
            throw "invalid value for 'Value', 'Value' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "key" = ${Key}
            "value" = ${Value}
            "isPreset" = ${IsPreset}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateClientCustomPropertyDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateClientCustomPropertyDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateClientCustomPropertyDto<PSCustomObject>
#>
function ConvertFrom-JsonToCreateClientCustomPropertyDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CreateClientCustomPropertyDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CreateClientCustomPropertyDto
        $AllProperties = ("key", "value", "isPreset")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'key' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) {
            throw "Error! JSON cannot be serialized due to the required property 'key' missing."
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) {
            throw "Error! JSON cannot be serialized due to the required property 'value' missing."
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isPreset"))) { #optional property not found
            $IsPreset = $null
        } else {
            $IsPreset = $JsonParameters.PSobject.Properties["isPreset"].value
        }

        $PSO = [PSCustomObject]@{
            "key" = ${Key}
            "value" = ${Value}
            "isPreset" = ${IsPreset}
        }

        return $PSO
    }

}

