#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
ID
.PARAMETER CreatedAt
Created at
.PARAMETER Source
Source
.PARAMETER Type
Type
.PARAMETER Status
Status
.PARAMETER Name
Name
.PARAMETER Country
Country
.PARAMETER Platform
Platform
.PARAMETER Provider
Provider
.PARAMETER Url
URL
.PARAMETER BusinessUnits
Business units
.PARAMETER DiscoveryReason
Discovery reason
.PARAMETER Owner
Owner
.PARAMETER Live
Live
.PARAMETER SubType
Sub type
.PARAMETER SuperType
Super type
.PARAMETER Metadata
Metadata
.OUTPUTS

Asset<PSCustomObject>
#>

function Initialize-Asset {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Source},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("verified", "Unregistered", "Incorrect Identification", "pending", "VerifiedOutOfScope", "VerifiedReducedAttack", "CDN", "Hanging Cloud IP", "Third Party", "VerifiedHoneypot")]
        [String]
        ${Status},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Country},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Platform},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Provider},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${BusinessUnits},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DiscoveryReason},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Owner},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Live},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubType},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SuperType},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Metadata}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Asset' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($null -eq $Source) {
            throw "invalid value for 'Source', 'Source' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Country) {
            throw "invalid value for 'Country', 'Country' cannot be null."
        }

        if ($null -eq $Platform) {
            throw "invalid value for 'Platform', 'Platform' cannot be null."
        }

        if ($null -eq $Provider) {
            throw "invalid value for 'Provider', 'Provider' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $BusinessUnits) {
            throw "invalid value for 'BusinessUnits', 'BusinessUnits' cannot be null."
        }

        if ($null -eq $DiscoveryReason) {
            throw "invalid value for 'DiscoveryReason', 'DiscoveryReason' cannot be null."
        }

        if ($null -eq $Owner) {
            throw "invalid value for 'Owner', 'Owner' cannot be null."
        }

        if ($null -eq $Live) {
            throw "invalid value for 'Live', 'Live' cannot be null."
        }

        if ($null -eq $SubType) {
            throw "invalid value for 'SubType', 'SubType' cannot be null."
        }

        if ($null -eq $SuperType) {
            throw "invalid value for 'SuperType', 'SuperType' cannot be null."
        }

        if ($null -eq $Metadata) {
            throw "invalid value for 'Metadata', 'Metadata' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "created_at" = ${CreatedAt}
            "source" = ${Source}
            "type" = ${Type}
            "status" = ${Status}
            "name" = ${Name}
            "country" = ${Country}
            "platform" = ${Platform}
            "provider" = ${Provider}
            "url" = ${Url}
            "businessUnits" = ${BusinessUnits}
            "discovery_reason" = ${DiscoveryReason}
            "owner" = ${Owner}
            "live" = ${Live}
            "sub_type" = ${SubType}
            "super_type" = ${SuperType}
            "metadata" = ${Metadata}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Asset<PSCustomObject>

.DESCRIPTION

Convert from JSON to Asset<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Asset<PSCustomObject>
#>
function ConvertFrom-JsonToAsset {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Asset' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Asset
        $AllProperties = ("id", "created_at", "source", "type", "status", "name", "country", "platform", "provider", "url", "businessUnits", "discovery_reason", "owner", "live", "sub_type", "super_type", "metadata")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created_at' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) {
            throw "Error! JSON cannot be serialized due to the required property 'source' missing."
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country"))) {
            throw "Error! JSON cannot be serialized due to the required property 'country' missing."
        } else {
            $Country = $JsonParameters.PSobject.Properties["country"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "platform"))) {
            throw "Error! JSON cannot be serialized due to the required property 'platform' missing."
        } else {
            $Platform = $JsonParameters.PSobject.Properties["platform"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provider"))) {
            throw "Error! JSON cannot be serialized due to the required property 'provider' missing."
        } else {
            $Provider = $JsonParameters.PSobject.Properties["provider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessUnits"))) {
            throw "Error! JSON cannot be serialized due to the required property 'businessUnits' missing."
        } else {
            $BusinessUnits = $JsonParameters.PSobject.Properties["businessUnits"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discovery_reason"))) {
            throw "Error! JSON cannot be serialized due to the required property 'discovery_reason' missing."
        } else {
            $DiscoveryReason = $JsonParameters.PSobject.Properties["discovery_reason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) {
            throw "Error! JSON cannot be serialized due to the required property 'owner' missing."
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "live"))) {
            throw "Error! JSON cannot be serialized due to the required property 'live' missing."
        } else {
            $Live = $JsonParameters.PSobject.Properties["live"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sub_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sub_type' missing."
        } else {
            $SubType = $JsonParameters.PSobject.Properties["sub_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "super_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'super_type' missing."
        } else {
            $SuperType = $JsonParameters.PSobject.Properties["super_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) {
            throw "Error! JSON cannot be serialized due to the required property 'metadata' missing."
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "created_at" = ${CreatedAt}
            "source" = ${Source}
            "type" = ${Type}
            "status" = ${Status}
            "name" = ${Name}
            "country" = ${Country}
            "platform" = ${Platform}
            "provider" = ${Provider}
            "url" = ${Url}
            "businessUnits" = ${BusinessUnits}
            "discovery_reason" = ${DiscoveryReason}
            "owner" = ${Owner}
            "live" = ${Live}
            "sub_type" = ${SubType}
            "super_type" = ${SuperType}
            "metadata" = ${Metadata}
        }

        return $PSO
    }

}

