#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Title
No description available.
.PARAMETER Description
No description available.
.PARAMETER Impact
No description available.
.PARAMETER FindingImpact
No description available.
.PARAMETER Tags
No description available.
.PARAMETER Evidence
No description available.
.PARAMETER Recommendation
No description available.
.PARAMETER Severity
No description available.
.PARAMETER Cvssv3Score
No description available.
.PARAMETER Cvssv3Metrics
No description available.
.PARAMETER Status
No description available.
.PARAMETER CreatedAt
No description available.
.PARAMETER Affected
No description available.
.PARAMETER CveId
No description available.
.PARAMETER EpssScore
No description available.
.PARAMETER Retest
No description available.
.PARAMETER FindingRetests
No description available.
.PARAMETER AssignedUser
No description available.
.PARAMETER LastSeen
No description available.
.PARAMETER LastStatusUpdatedAt
No description available.
.PARAMETER Age
No description available.
.PARAMETER Criticality
No description available.
.PARAMETER CustomProperties
No description available.
.PARAMETER DetectionRules
No description available.
.OUTPUTS

ClientFinding<PSCustomObject>
#>

function Initialize-ClientFinding {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Impact},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FindingImpact},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Evidence},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Recommendation},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("critical", "high", "medium", "low", "info")]
        [String]
        ${Severity},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Cvssv3Score},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cvssv3Metrics},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("confirmed", "unconfirmed", "remediated", "risk-accepted", "closed", "asset-no-longer-tracked")]
        [String]
        ${Status},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${CreatedAt},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Affected},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CveId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${EpssScore},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Retest},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${FindingRetests},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AssignedUser},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastSeen},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LastStatusUpdatedAt},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Age},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Criticality},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CustomProperties},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${DetectionRules}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClientFinding' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Title) {
            throw "invalid value for 'Title', 'Title' cannot be null."
        }

        if ($null -eq $Description) {
            throw "invalid value for 'Description', 'Description' cannot be null."
        }

        if ($null -eq $Impact) {
            throw "invalid value for 'Impact', 'Impact' cannot be null."
        }

        if ($null -eq $FindingImpact) {
            throw "invalid value for 'FindingImpact', 'FindingImpact' cannot be null."
        }

        if ($null -eq $Tags) {
            throw "invalid value for 'Tags', 'Tags' cannot be null."
        }

        if ($null -eq $Evidence) {
            throw "invalid value for 'Evidence', 'Evidence' cannot be null."
        }

        if ($null -eq $Recommendation) {
            throw "invalid value for 'Recommendation', 'Recommendation' cannot be null."
        }

        if ($null -eq $Severity) {
            throw "invalid value for 'Severity', 'Severity' cannot be null."
        }

        if ($null -eq $Cvssv3Score) {
            throw "invalid value for 'Cvssv3Score', 'Cvssv3Score' cannot be null."
        }

        if ($null -eq $Cvssv3Metrics) {
            throw "invalid value for 'Cvssv3Metrics', 'Cvssv3Metrics' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($null -eq $Affected) {
            throw "invalid value for 'Affected', 'Affected' cannot be null."
        }

        if ($null -eq $FindingRetests) {
            throw "invalid value for 'FindingRetests', 'FindingRetests' cannot be null."
        }

        if ($null -eq $AssignedUser) {
            throw "invalid value for 'AssignedUser', 'AssignedUser' cannot be null."
        }

        if ($null -eq $LastStatusUpdatedAt) {
            throw "invalid value for 'LastStatusUpdatedAt', 'LastStatusUpdatedAt' cannot be null."
        }

        if ($null -eq $Age) {
            throw "invalid value for 'Age', 'Age' cannot be null."
        }

        if ($null -eq $Criticality) {
            throw "invalid value for 'Criticality', 'Criticality' cannot be null."
        }

        if ($null -eq $CustomProperties) {
            throw "invalid value for 'CustomProperties', 'CustomProperties' cannot be null."
        }

        if ($null -eq $DetectionRules) {
            throw "invalid value for 'DetectionRules', 'DetectionRules' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "title" = ${Title}
            "description" = ${Description}
            "impact" = ${Impact}
            "finding_impact" = ${FindingImpact}
            "tags" = ${Tags}
            "evidence" = ${Evidence}
            "recommendation" = ${Recommendation}
            "severity" = ${Severity}
            "cvssv3_score" = ${Cvssv3Score}
            "cvssv3_metrics" = ${Cvssv3Metrics}
            "status" = ${Status}
            "created_at" = ${CreatedAt}
            "affected" = ${Affected}
            "cve_id" = ${CveId}
            "epss_score" = ${EpssScore}
            "retest" = ${Retest}
            "finding_retests" = ${FindingRetests}
            "assigned_user" = ${AssignedUser}
            "last_seen" = ${LastSeen}
            "last_status_updated_at" = ${LastStatusUpdatedAt}
            "age" = ${Age}
            "criticality" = ${Criticality}
            "customProperties" = ${CustomProperties}
            "detection_rules" = ${DetectionRules}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClientFinding<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClientFinding<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClientFinding<PSCustomObject>
#>
function ConvertFrom-JsonToClientFinding {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClientFinding' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClientFinding
        $AllProperties = ("id", "title", "description", "impact", "finding_impact", "tags", "evidence", "recommendation", "severity", "cvssv3_score", "cvssv3_metrics", "status", "created_at", "affected", "cve_id", "epss_score", "retest", "finding_retests", "assigned_user", "last_seen", "last_status_updated_at", "age", "criticality", "customProperties", "detection_rules")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) {
            throw "Error! JSON cannot be serialized due to the required property 'title' missing."
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) {
            throw "Error! JSON cannot be serialized due to the required property 'description' missing."
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "impact"))) {
            throw "Error! JSON cannot be serialized due to the required property 'impact' missing."
        } else {
            $Impact = $JsonParameters.PSobject.Properties["impact"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "finding_impact"))) {
            throw "Error! JSON cannot be serialized due to the required property 'finding_impact' missing."
        } else {
            $FindingImpact = $JsonParameters.PSobject.Properties["finding_impact"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) {
            throw "Error! JSON cannot be serialized due to the required property 'tags' missing."
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "evidence"))) {
            throw "Error! JSON cannot be serialized due to the required property 'evidence' missing."
        } else {
            $Evidence = $JsonParameters.PSobject.Properties["evidence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recommendation"))) {
            throw "Error! JSON cannot be serialized due to the required property 'recommendation' missing."
        } else {
            $Recommendation = $JsonParameters.PSobject.Properties["recommendation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "severity"))) {
            throw "Error! JSON cannot be serialized due to the required property 'severity' missing."
        } else {
            $Severity = $JsonParameters.PSobject.Properties["severity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cvssv3_score"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cvssv3_score' missing."
        } else {
            $Cvssv3Score = $JsonParameters.PSobject.Properties["cvssv3_score"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cvssv3_metrics"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cvssv3_metrics' missing."
        } else {
            $Cvssv3Metrics = $JsonParameters.PSobject.Properties["cvssv3_metrics"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created_at' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "affected"))) {
            throw "Error! JSON cannot be serialized due to the required property 'affected' missing."
        } else {
            $Affected = $JsonParameters.PSobject.Properties["affected"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "finding_retests"))) {
            throw "Error! JSON cannot be serialized due to the required property 'finding_retests' missing."
        } else {
            $FindingRetests = $JsonParameters.PSobject.Properties["finding_retests"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigned_user"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assigned_user' missing."
        } else {
            $AssignedUser = $JsonParameters.PSobject.Properties["assigned_user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_status_updated_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_status_updated_at' missing."
        } else {
            $LastStatusUpdatedAt = $JsonParameters.PSobject.Properties["last_status_updated_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "age"))) {
            throw "Error! JSON cannot be serialized due to the required property 'age' missing."
        } else {
            $Age = $JsonParameters.PSobject.Properties["age"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "criticality"))) {
            throw "Error! JSON cannot be serialized due to the required property 'criticality' missing."
        } else {
            $Criticality = $JsonParameters.PSobject.Properties["criticality"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customProperties"))) {
            throw "Error! JSON cannot be serialized due to the required property 'customProperties' missing."
        } else {
            $CustomProperties = $JsonParameters.PSobject.Properties["customProperties"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "detection_rules"))) {
            throw "Error! JSON cannot be serialized due to the required property 'detection_rules' missing."
        } else {
            $DetectionRules = $JsonParameters.PSobject.Properties["detection_rules"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cve_id"))) { #optional property not found
            $CveId = $null
        } else {
            $CveId = $JsonParameters.PSobject.Properties["cve_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "epss_score"))) { #optional property not found
            $EpssScore = $null
        } else {
            $EpssScore = $JsonParameters.PSobject.Properties["epss_score"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retest"))) { #optional property not found
            $Retest = $null
        } else {
            $Retest = $JsonParameters.PSobject.Properties["retest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_seen"))) { #optional property not found
            $LastSeen = $null
        } else {
            $LastSeen = $JsonParameters.PSobject.Properties["last_seen"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "title" = ${Title}
            "description" = ${Description}
            "impact" = ${Impact}
            "finding_impact" = ${FindingImpact}
            "tags" = ${Tags}
            "evidence" = ${Evidence}
            "recommendation" = ${Recommendation}
            "severity" = ${Severity}
            "cvssv3_score" = ${Cvssv3Score}
            "cvssv3_metrics" = ${Cvssv3Metrics}
            "status" = ${Status}
            "created_at" = ${CreatedAt}
            "affected" = ${Affected}
            "cve_id" = ${CveId}
            "epss_score" = ${EpssScore}
            "retest" = ${Retest}
            "finding_retests" = ${FindingRetests}
            "assigned_user" = ${AssignedUser}
            "last_seen" = ${LastSeen}
            "last_status_updated_at" = ${LastStatusUpdatedAt}
            "age" = ${Age}
            "criticality" = ${Criticality}
            "customProperties" = ${CustomProperties}
            "detection_rules" = ${DetectionRules}
        }

        return $PSO
    }

}

