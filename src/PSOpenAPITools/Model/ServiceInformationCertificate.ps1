#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
ID
.PARAMETER SubjectCommonName
Subject Common Name
.PARAMETER SubjectOrganisation
Subject Organisation
.PARAMETER SubjectAltNames
Subject Alt Names
.PARAMETER SubjectCountry
Subject Country
.PARAMETER IssuerCommonName
Issuer CommonName
.PARAMETER IssuerOrganisation
Issuer Organisation
.PARAMETER IssuerCountry
Issuer Country
.PARAMETER Fingerprint
Fingerprint
.PARAMETER PublicKeyInfoAlg
PublicKeyInfoAlg
.PARAMETER PublicKeyInfoSize
PublicKeyInfoSize
.PARAMETER Status
No description available.
.PARAMETER CreatedAt
Discovery date
.OUTPUTS

ServiceInformationCertificate<PSCustomObject>
#>

function Initialize-ServiceInformationCertificate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectCommonName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectOrganisation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${SubjectAltNames},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectCountry},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssuerCommonName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssuerOrganisation},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IssuerCountry},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Fingerprint},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PublicKeyInfoAlg},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PublicKeyInfoSize},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Expired", "Expiring Within 30 Days", "Valid")]
        [String]
        ${Status},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedAt}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ServiceInformationCertificate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $SubjectCommonName) {
            throw "invalid value for 'SubjectCommonName', 'SubjectCommonName' cannot be null."
        }

        if ($null -eq $SubjectOrganisation) {
            throw "invalid value for 'SubjectOrganisation', 'SubjectOrganisation' cannot be null."
        }

        if ($null -eq $SubjectAltNames) {
            throw "invalid value for 'SubjectAltNames', 'SubjectAltNames' cannot be null."
        }

        if ($null -eq $SubjectCountry) {
            throw "invalid value for 'SubjectCountry', 'SubjectCountry' cannot be null."
        }

        if ($null -eq $IssuerCommonName) {
            throw "invalid value for 'IssuerCommonName', 'IssuerCommonName' cannot be null."
        }

        if ($null -eq $IssuerOrganisation) {
            throw "invalid value for 'IssuerOrganisation', 'IssuerOrganisation' cannot be null."
        }

        if ($null -eq $IssuerCountry) {
            throw "invalid value for 'IssuerCountry', 'IssuerCountry' cannot be null."
        }

        if ($null -eq $Fingerprint) {
            throw "invalid value for 'Fingerprint', 'Fingerprint' cannot be null."
        }

        if ($null -eq $PublicKeyInfoAlg) {
            throw "invalid value for 'PublicKeyInfoAlg', 'PublicKeyInfoAlg' cannot be null."
        }

        if ($null -eq $PublicKeyInfoSize) {
            throw "invalid value for 'PublicKeyInfoSize', 'PublicKeyInfoSize' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "subjectCommonName" = ${SubjectCommonName}
            "subjectOrganisation" = ${SubjectOrganisation}
            "subjectAltNames" = ${SubjectAltNames}
            "subjectCountry" = ${SubjectCountry}
            "issuerCommonName" = ${IssuerCommonName}
            "issuerOrganisation" = ${IssuerOrganisation}
            "issuerCountry" = ${IssuerCountry}
            "fingerprint" = ${Fingerprint}
            "publicKeyInfoAlg" = ${PublicKeyInfoAlg}
            "publicKeyInfoSize" = ${PublicKeyInfoSize}
            "status" = ${Status}
            "createdAt" = ${CreatedAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ServiceInformationCertificate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ServiceInformationCertificate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ServiceInformationCertificate<PSCustomObject>
#>
function ConvertFrom-JsonToServiceInformationCertificate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ServiceInformationCertificate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ServiceInformationCertificate
        $AllProperties = ("id", "subjectCommonName", "subjectOrganisation", "subjectAltNames", "subjectCountry", "issuerCommonName", "issuerOrganisation", "issuerCountry", "fingerprint", "publicKeyInfoAlg", "publicKeyInfoSize", "status", "createdAt")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectCommonName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'subjectCommonName' missing."
        } else {
            $SubjectCommonName = $JsonParameters.PSobject.Properties["subjectCommonName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectOrganisation"))) {
            throw "Error! JSON cannot be serialized due to the required property 'subjectOrganisation' missing."
        } else {
            $SubjectOrganisation = $JsonParameters.PSobject.Properties["subjectOrganisation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectAltNames"))) {
            throw "Error! JSON cannot be serialized due to the required property 'subjectAltNames' missing."
        } else {
            $SubjectAltNames = $JsonParameters.PSobject.Properties["subjectAltNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectCountry"))) {
            throw "Error! JSON cannot be serialized due to the required property 'subjectCountry' missing."
        } else {
            $SubjectCountry = $JsonParameters.PSobject.Properties["subjectCountry"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuerCommonName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issuerCommonName' missing."
        } else {
            $IssuerCommonName = $JsonParameters.PSobject.Properties["issuerCommonName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuerOrganisation"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issuerOrganisation' missing."
        } else {
            $IssuerOrganisation = $JsonParameters.PSobject.Properties["issuerOrganisation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuerCountry"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issuerCountry' missing."
        } else {
            $IssuerCountry = $JsonParameters.PSobject.Properties["issuerCountry"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fingerprint"))) {
            throw "Error! JSON cannot be serialized due to the required property 'fingerprint' missing."
        } else {
            $Fingerprint = $JsonParameters.PSobject.Properties["fingerprint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "publicKeyInfoAlg"))) {
            throw "Error! JSON cannot be serialized due to the required property 'publicKeyInfoAlg' missing."
        } else {
            $PublicKeyInfoAlg = $JsonParameters.PSobject.Properties["publicKeyInfoAlg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "publicKeyInfoSize"))) {
            throw "Error! JSON cannot be serialized due to the required property 'publicKeyInfoSize' missing."
        } else {
            $PublicKeyInfoSize = $JsonParameters.PSobject.Properties["publicKeyInfoSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) { #optional property not found
            $CreatedAt = $null
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "subjectCommonName" = ${SubjectCommonName}
            "subjectOrganisation" = ${SubjectOrganisation}
            "subjectAltNames" = ${SubjectAltNames}
            "subjectCountry" = ${SubjectCountry}
            "issuerCommonName" = ${IssuerCommonName}
            "issuerOrganisation" = ${IssuerOrganisation}
            "issuerCountry" = ${IssuerCountry}
            "fingerprint" = ${Fingerprint}
            "publicKeyInfoAlg" = ${PublicKeyInfoAlg}
            "publicKeyInfoSize" = ${PublicKeyInfoSize}
            "status" = ${Status}
            "createdAt" = ${CreatedAt}
        }

        return $PSO
    }

}

