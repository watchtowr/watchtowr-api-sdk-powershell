#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RequestedBy
No description available.
.PARAMETER RequestedAt
No description available.
.PARAMETER RetestStatus
No description available.
.PARAMETER StatusOccurredAt
No description available.
.PARAMETER CompletedAt
No description available.
.PARAMETER Evidence
No description available.
.OUTPUTS

FindingRetestResponseDto<PSCustomObject>
#>

function Initialize-FindingRetestResponseDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestedBy},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${RequestedAt},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("started", "in-progress", "success", "error")]
        [String]
        ${RetestStatus},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${StatusOccurredAt},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CompletedAt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Evidence}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => FindingRetestResponseDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $RequestedBy) {
            throw "invalid value for 'RequestedBy', 'RequestedBy' cannot be null."
        }

        if ($null -eq $RequestedAt) {
            throw "invalid value for 'RequestedAt', 'RequestedAt' cannot be null."
        }

        if ($null -eq $RetestStatus) {
            throw "invalid value for 'RetestStatus', 'RetestStatus' cannot be null."
        }

        if ($null -eq $StatusOccurredAt) {
            throw "invalid value for 'StatusOccurredAt', 'StatusOccurredAt' cannot be null."
        }

        if ($null -eq $CompletedAt) {
            throw "invalid value for 'CompletedAt', 'CompletedAt' cannot be null."
        }

        if ($null -eq $Evidence) {
            throw "invalid value for 'Evidence', 'Evidence' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "requested_by" = ${RequestedBy}
            "requested_at" = ${RequestedAt}
            "retest_status" = ${RetestStatus}
            "status_occurred_at" = ${StatusOccurredAt}
            "completed_at" = ${CompletedAt}
            "evidence" = ${Evidence}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FindingRetestResponseDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to FindingRetestResponseDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FindingRetestResponseDto<PSCustomObject>
#>
function ConvertFrom-JsonToFindingRetestResponseDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => FindingRetestResponseDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FindingRetestResponseDto
        $AllProperties = ("requested_by", "requested_at", "retest_status", "status_occurred_at", "completed_at", "evidence")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'requested_by' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requested_by"))) {
            throw "Error! JSON cannot be serialized due to the required property 'requested_by' missing."
        } else {
            $RequestedBy = $JsonParameters.PSobject.Properties["requested_by"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requested_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'requested_at' missing."
        } else {
            $RequestedAt = $JsonParameters.PSobject.Properties["requested_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retest_status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'retest_status' missing."
        } else {
            $RetestStatus = $JsonParameters.PSobject.Properties["retest_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status_occurred_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status_occurred_at' missing."
        } else {
            $StatusOccurredAt = $JsonParameters.PSobject.Properties["status_occurred_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "completed_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'completed_at' missing."
        } else {
            $CompletedAt = $JsonParameters.PSobject.Properties["completed_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "evidence"))) {
            throw "Error! JSON cannot be serialized due to the required property 'evidence' missing."
        } else {
            $Evidence = $JsonParameters.PSobject.Properties["evidence"].value
        }

        $PSO = [PSCustomObject]@{
            "requested_by" = ${RequestedBy}
            "requested_at" = ${RequestedAt}
            "retest_status" = ${RetestStatus}
            "status_occurred_at" = ${StatusOccurredAt}
            "completed_at" = ${CompletedAt}
            "evidence" = ${Evidence}
        }

        return $PSO
    }

}

