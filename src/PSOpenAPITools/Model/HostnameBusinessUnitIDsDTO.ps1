#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BusinessUnitIds
List of business unit IDs to assign the asset to.
.PARAMETER CascadeSubdomain
Cascade business units to domain's subdomains
.PARAMETER CascadeIp
Cascade business units to domain's ipaddresses
.OUTPUTS

HostnameBusinessUnitIDsDTO<PSCustomObject>
#>

function Initialize-HostnameBusinessUnitIDsDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${BusinessUnitIds},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${CascadeSubdomain},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${CascadeIp}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HostnameBusinessUnitIDsDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $BusinessUnitIds) {
            throw "invalid value for 'BusinessUnitIds', 'BusinessUnitIds' cannot be null."
        }

        if ($null -eq $CascadeSubdomain) {
            throw "invalid value for 'CascadeSubdomain', 'CascadeSubdomain' cannot be null."
        }

        if ($null -eq $CascadeIp) {
            throw "invalid value for 'CascadeIp', 'CascadeIp' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "businessUnitIds" = ${BusinessUnitIds}
            "cascadeSubdomain" = ${CascadeSubdomain}
            "cascadeIp" = ${CascadeIp}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HostnameBusinessUnitIDsDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to HostnameBusinessUnitIDsDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HostnameBusinessUnitIDsDTO<PSCustomObject>
#>
function ConvertFrom-JsonToHostnameBusinessUnitIDsDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HostnameBusinessUnitIDsDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HostnameBusinessUnitIDsDTO
        $AllProperties = ("businessUnitIds", "cascadeSubdomain", "cascadeIp")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'businessUnitIds' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessUnitIds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'businessUnitIds' missing."
        } else {
            $BusinessUnitIds = $JsonParameters.PSobject.Properties["businessUnitIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cascadeSubdomain"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cascadeSubdomain' missing."
        } else {
            $CascadeSubdomain = $JsonParameters.PSobject.Properties["cascadeSubdomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cascadeIp"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cascadeIp' missing."
        } else {
            $CascadeIp = $JsonParameters.PSobject.Properties["cascadeIp"].value
        }

        $PSO = [PSCustomObject]@{
            "businessUnitIds" = ${BusinessUnitIds}
            "cascadeSubdomain" = ${CascadeSubdomain}
            "cascadeIp" = ${CascadeIp}
        }

        return $PSO
    }

}

