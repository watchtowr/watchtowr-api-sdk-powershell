#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DnsRecordsTotalCount
No description available.
.PARAMETER DnsRecordsOwned
No description available.
.PARAMETER DnsRecordsPointingAt
No description available.
.OUTPUTS

ClientIpDnsRecordData<PSCustomObject>
#>

function Initialize-ClientIpDnsRecordData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${DnsRecordsTotalCount},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DnsRecordsOwned},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DnsRecordsPointingAt}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ClientIpDnsRecordData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DnsRecordsTotalCount) {
            throw "invalid value for 'DnsRecordsTotalCount', 'DnsRecordsTotalCount' cannot be null."
        }

        if ($null -eq $DnsRecordsOwned) {
            throw "invalid value for 'DnsRecordsOwned', 'DnsRecordsOwned' cannot be null."
        }

        if ($null -eq $DnsRecordsPointingAt) {
            throw "invalid value for 'DnsRecordsPointingAt', 'DnsRecordsPointingAt' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "dns_records_total_count" = ${DnsRecordsTotalCount}
            "dns_records_owned" = ${DnsRecordsOwned}
            "dns_records_pointing_at" = ${DnsRecordsPointingAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClientIpDnsRecordData<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClientIpDnsRecordData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClientIpDnsRecordData<PSCustomObject>
#>
function ConvertFrom-JsonToClientIpDnsRecordData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ClientIpDnsRecordData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ClientIpDnsRecordData
        $AllProperties = ("dns_records_total_count", "dns_records_owned", "dns_records_pointing_at")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'dns_records_total_count' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dns_records_total_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dns_records_total_count' missing."
        } else {
            $DnsRecordsTotalCount = $JsonParameters.PSobject.Properties["dns_records_total_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dns_records_owned"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dns_records_owned' missing."
        } else {
            $DnsRecordsOwned = $JsonParameters.PSobject.Properties["dns_records_owned"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dns_records_pointing_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dns_records_pointing_at' missing."
        } else {
            $DnsRecordsPointingAt = $JsonParameters.PSobject.Properties["dns_records_pointing_at"].value
        }

        $PSO = [PSCustomObject]@{
            "dns_records_total_count" = ${DnsRecordsTotalCount}
            "dns_records_owned" = ${DnsRecordsOwned}
            "dns_records_pointing_at" = ${DnsRecordsPointingAt}
        }

        return $PSO
    }

}

