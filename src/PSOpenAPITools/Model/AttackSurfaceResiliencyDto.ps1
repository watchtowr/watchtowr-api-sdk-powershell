#
# Complete watchTowr Platform API Documentation
# The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 
# Version: 1.0
# Contact: support@watchTowr.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConcerningServices
Count of concerning network services
.PARAMETER ConcerningPointsOfInterest
Count of concerning points of interest
.PARAMETER ValidCredentials
Count of findings with valid credentials
.PARAMETER OpenFindings
Total count of open findings
.OUTPUTS

AttackSurfaceResiliencyDto<PSCustomObject>
#>

function Initialize-AttackSurfaceResiliencyDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${ConcerningServices},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${ConcerningPointsOfInterest},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${ValidCredentials},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${OpenFindings}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AttackSurfaceResiliencyDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ConcerningServices) {
            throw "invalid value for 'ConcerningServices', 'ConcerningServices' cannot be null."
        }

        if ($null -eq $ConcerningPointsOfInterest) {
            throw "invalid value for 'ConcerningPointsOfInterest', 'ConcerningPointsOfInterest' cannot be null."
        }

        if ($null -eq $ValidCredentials) {
            throw "invalid value for 'ValidCredentials', 'ValidCredentials' cannot be null."
        }

        if ($null -eq $OpenFindings) {
            throw "invalid value for 'OpenFindings', 'OpenFindings' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "concerningServices" = ${ConcerningServices}
            "concerningPointsOfInterest" = ${ConcerningPointsOfInterest}
            "validCredentials" = ${ValidCredentials}
            "openFindings" = ${OpenFindings}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AttackSurfaceResiliencyDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to AttackSurfaceResiliencyDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AttackSurfaceResiliencyDto<PSCustomObject>
#>
function ConvertFrom-JsonToAttackSurfaceResiliencyDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AttackSurfaceResiliencyDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AttackSurfaceResiliencyDto
        $AllProperties = ("concerningServices", "concerningPointsOfInterest", "validCredentials", "openFindings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'concerningServices' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "concerningServices"))) {
            throw "Error! JSON cannot be serialized due to the required property 'concerningServices' missing."
        } else {
            $ConcerningServices = $JsonParameters.PSobject.Properties["concerningServices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "concerningPointsOfInterest"))) {
            throw "Error! JSON cannot be serialized due to the required property 'concerningPointsOfInterest' missing."
        } else {
            $ConcerningPointsOfInterest = $JsonParameters.PSobject.Properties["concerningPointsOfInterest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validCredentials"))) {
            throw "Error! JSON cannot be serialized due to the required property 'validCredentials' missing."
        } else {
            $ValidCredentials = $JsonParameters.PSobject.Properties["validCredentials"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "openFindings"))) {
            throw "Error! JSON cannot be serialized due to the required property 'openFindings' missing."
        } else {
            $OpenFindings = $JsonParameters.PSobject.Properties["openFindings"].value
        }

        $PSO = [PSCustomObject]@{
            "concerningServices" = ${ConcerningServices}
            "concerningPointsOfInterest" = ${ConcerningPointsOfInterest}
            "validCredentials" = ${ValidCredentials}
            "openFindings" = ${OpenFindings}
        }

        return $PSO
    }

}

